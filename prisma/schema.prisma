// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Calculation {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  area        Float
  basePrice   Float      @default(1500)
  totalPrice  Float
  notes       String?
  createdBy   String?
  factors     FactorValue[]
}

model Factor {
  id          String     @id @default(uuid())
  name        String     
  description String?    
  value       Float      
  isPositive  Boolean    
  isActive    Boolean    @default(true)
  category    String?    
  
  factorValues FactorValue[] @relation("FactorToFactorValue")
}

model FactorValue {
  id          String     @id @default(uuid())
  calculation Calculation @relation(fields: [calculationId], references: [id])
  calculationId String
  factor      Factor     @relation(fields: [factorId], references: [id], name: "FactorToFactorValue")
  factorId    String
  isApplied   Boolean    @default(true)
}

model User {
  id            String   @id @default(uuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  role          String   @default("USER")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}